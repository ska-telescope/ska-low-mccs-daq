from aavs_calibration.models import FibreDelay
from pyaavs import station

from datetime import datetime
from time import sleep
from math import floor
import numpy as np
import logging
import pexpect
import sys
import os

stop_bandpass = False

def signed(data, bits=8, ext_bits=8):
    """ Return signed data"""
    data = data % 2**bits
    if data >= 2**(bits-1):
        data -= 2**bits
    if ext_bits > bits:
        if data == -2**(bits-1):
            data = -2**(ext_bits-1)
    return data


def monitor_delays(frequency, reference_antenna, test_antenna, reference_pol, test_pol, cadence):
    """ Monitor delay through fibre loopback 
    :param frequency: Frequency where signal will be
    :param reference_antenna: Antenna where reference signal is
    :param test_antenna: Antenna where looped back signal is
    :param reference_pol: Pol where reference signal is
    :param test_pol: Pol where looped back signal is
    :param cadence: Period at which to measure delay """
    global stop_bandpass

    config_path = "/opt/aavs/config/uk_phase0.yml"
    station.load_configuration_file(config_path)
    station_conf = station.configuration

    user = 'pi'
    password = 'raspberry'
    host = 'rasp-pi'
    command = "'./syncbox.py --reference=external --freq={} --save'"

    def _change_frequency(frequency):
        """ Change frequency generated by signal generator 
        :param frequency: frequency in MHz"""

        freq_command = command.format(frequency)
        child = pexpect.spawn('ssh %s@%s %s' % (user, host, freq_command), logfile=sys.stdout, timeout=None)
        prompt = child.expect(['password:', r"yes/no", pexpect.EOF])
        if prompt == 0:
                child.sendline(password)
        elif prompt == 1:
                child.sendline("yes")
                child.expect("password:", timeout=30)
                child.sendline(password)
        data = child.read()
        child.close()

    # Identify FPGAs
    if reference_antenna < 8:
        input_0_ptr = 2*reference_antenna + reference_pol
        reference_fpga = 'fpga1'
    else:
        input_0_ptr = 2*(reference_antenna-8) + reference_pol
        reference_fpga = 'fpga2'
    if test_antenna < 8:
        input_1_ptr = 2*test_antenna + test_pol
        test_fpga = 'fpga1'
    else:
        input_1_ptr = 2*(test_antenna-8) + test_pol
        test_fpga = 'fpga2'

    if reference_fpga != test_fpga:
        logging.error("Error! Signals must be connected to the same FPGA!")
        return

    # Define readout register pointer
    channel = int(floor(frequency / (400 / 512.0)))
    readout_ptr_register = (channel << 16) + (input_1_ptr << 8) + input_0_ptr
    _change_frequency(int(round(frequency)))
    logging.info("Delay measurement using channel {}".format(channel))

    # Create and connect to station
    delay_station = station.Station(station_conf)
    delay_station.connect()

    def _connect_station():
        """ Return a connected station """

        # Connect to station and see if properly formed
        while True:
            try:
                # Check that station is well formed
                delay_station.check_station_status()
                if not delay_station.properly_formed_station:
                    raise Exception
                else:
                    break
            except Exception as e:
                sleep(60) 
                try:
                    delay_station.connect()
                except:
                    continue

    # Perform multiple readings for each period and use the median
    repeated_readings = 10

    # Continue until asked to stop
    while not stop_bandpass:

        # Check station status
        _connect_station()

        # Get five readings
        phase_diffs = np.zeros(repeated_readings)
        for counter in range(repeated_readings):

            delay_station['%s.lmc_gen.readout_channel_ptr' % reference_fpga] = 0x00000000 + readout_ptr_register
            sleep(0.1)

            # Get values
            reference_value = signed((delay_station['%s.lmc_gen.readout_input_0' % reference_fpga][0]  & 0xFFF), 12) +           \
                              signed(((delay_station['%s.lmc_gen.readout_input_0' % reference_fpga][0] >> 12) & 0xFFF), 12)*1j
            test_value =      signed((delay_station['%s.lmc_gen.readout_input_1' % test_fpga][0]       & 0xFFF), 12) +           \
                              signed(((delay_station['%s.lmc_gen.readout_input_1' % test_fpga][0]      >> 12) & 0xFFF), 12)*1j

            delay_station['%s.lmc_gen.readout_channel_ptr' % reference_fpga] = 0x30000000 + readout_ptr_register

            # Calculate phase difference
            a0 = np.angle(reference_value)
            a1 = np.angle(test_value)
            phase_diffs[counter] = np.rad2deg(np.arctan2(np.sin(a0-a1), np.cos(a0-a1)))

        # Save the median to the database
#        new_delay = FibreDelay(frequency=frequency, delay=np.median(phase_diffs), measurement_time=datetime.now())
 #       new_delay.save()
	print np.median(phase_diffs)

        # Sleep for a while
        sleep(cadence)

# Set logging
log = logging.getLogger('')
log.setLevel(logging.INFO)
line_format = logging.Formatter("%(asctime)s - %(levelname)s - %(message)s")
ch = logging.FileHandler(filename="/opt/aavs/log/bandpasses", mode='w')
ch.setFormatter(line_format)
log.addHandler(ch)

monitor_delays(191.875, 0, 1, 0, 0, 1)

