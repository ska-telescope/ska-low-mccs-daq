# GitLab CI in conjunction with GitLab Runner can use Docker Engine to test and build any application.
# Docker, when used with GitLab CI, runs each job in a separate and isolated container using the predefined image that is set up in .gitlab-ci.yml.
# In this case we use the latest python docker image to build and test this project.

image: $SKA_K8S_TOOLS_DOCKER_BUILDER_IMAGE

variables:
  GIT_SUBMODULE_STRATEGY: recursive

# cache is used to specify a list of files and directories which should be cached between jobs. You can only use paths that are within the project workspace.
# If cache is defined outside the scope of jobs, it means it is set globally and all jobs will use that definition
cache:
  paths:
    - build


stages:
  - lint
  - build
  - test
  - test-psi-low
  - publish
  - pages
  - scan


include:
  # Python packages build,lint, test and publish
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/python.gitlab-ci.yml'

  # OCI
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/oci-image.gitlab-ci.yml'

  # Docs pages
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/docs.gitlab-ci.yml'

  # Create Gitlab CI badges from CI metrics
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/finaliser.gitlab-ci.yml'

  # Create a release
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/release.gitlab-ci.yml'

  # Helm chart
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/helm-chart.gitlab-ci.yml'

  # k8s
  - project: 'ska-telescope/templates-repository'
    file: 'gitlab-ci/includes/k8s.gitlab-ci.yml'


oci-image-build:
  stage: build
  before_script:
    - '[ -f .make/oci.mk ] || (echo "File oci.mk not included in Makefile; exit 1")'
    - 'make help | grep oci-build-all'
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - make oci-build-all CAR_OCI_REGISTRY_HOST=${CI_REGISTRY_IMAGE}
  after_script:
    - source .release
    - CONTAINER_ID=$(docker create "${CI_REGISTRY}/${CI_PROJECT_NAMESPACE}/${CI_PROJECT_NAME}/${CI_PROJECT_NAME}:${release}-dev.c${CI_COMMIT_SHORT_SHA}")
    - docker cp -a ${CONTAINER_ID}:/opt/aavs ${CI_PROJECT_DIR}/aavs
    - docker rm ${CONTAINER_ID}
  artifacts:
    paths:
      - ${CI_PROJECT_DIR}/aavs


# This `python-test` job is wholesale copied from:
# - project: 'ska-telescope/templates-repository'
#   file: 'gitlab-ci/includes/python-test.gitlab-ci.yml'
# Any changes to these templates will NOT be reflected here.
python-test:
  image: $SKA_PYTHON_PYTANGO_BUILDER_IMAGE
  stage: test
  tags:
    - k8srunner
  before_script:
    - '[ -f .make/python.mk ] || (echo "File python.mk not included in Makefile; exit 1")'
    - 'make help | grep python-test'
    - poetry config virtualenvs.in-project true
    - echo "python-build Setting.. poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE"
    - poetry config virtualenvs.create $POETRY_CONFIG_VIRTUALENVS_CREATE
    - |
      if [[ -f pyproject.toml ]]; then
        echo "python-test: Installing with poetry";
        time poetry install;
      else
        if  [[ -f requirements.txt ]]; then
          echo "python-test: Installing with pip";
          time pip3 install -r requirements.txt;
        fi;
      fi;
    - mkdir /opt/aavs
    - cp -R ${CI_PROJECT_DIR}/aavs /opt/
  script:
    - make python-test;
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - build/
    reports:
      junit: build/reports/unit-tests.xml
    when: always
  rules:
    - exists:
        - pyproject.toml
        - setup.py
        - tests/requirements.txt
        - tests/pytest.ini

psi-low-k8s-test:
  stage: test-psi-low
  when: manual
  tags:
    - k8srunner-psi-low
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    on_stop: psi-low-stop-k8s
    auto_stop_in: 1 minute
  variables:
    TANGO_HOST: "tango-databaseds.$KUBE_NAMESPACE:10000"
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
    K8S_FACILITY: psi-low
    PASS_PROXY_CONFIG: "yes"
    JUNITXML_REPORT_PATH: build/reports/psi-low-functional-tests.xml
    CUCUMBER_JSON_PATH: build/reports/psi-low-cucumber.json
    JSON_REPORT_PATH: build/reports/psi-low-report.json
  before_script:
    - make k8s-install-chart
    - make k8s-wait
  script:
    - make k8s-test
  artifacts:
    name: "$CI_PROJECT_NAME-$CI_JOB_ID"
    paths:
      - "build/"
    reports:
      junit: build/report.xml
    when: always

psi-low-xray-publish:
  stage: test-psi-low
  needs:
    - psi-low-k8s-test
  tags:
    - k8srunner
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    TEST_ENV: PSI-LOW
    REALHW_OR_SIMULATED: real
    XRAY_TEST_RESULT_FILE: build/reports/psi-low-cucumber.json
  script:
    - make xray-publish
  allow_failure: true

psi-low-stop-k8s:
  stage: test-psi-low
  needs:
    - psi-low-k8s-test
  tags:
    - k8srunner-psi-low
  environment:
    name: test-psi-low/$CI_COMMIT_REF_SLUG
    action: stop
  image: $SKA_K8S_TOOLS_BUILD_DEPLOY
  variables:
    KUBE_NAMESPACE: 'ci-$CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA'
  script:
    - make k8s-uninstall-chart
    - kubectl -n $KUBE_NAMESPACE delete pods,svc,daemonsets,deployments,replicasets,statefulsets,cronjobs,jobs,ingresses,configmaps --all
    - make k8s-delete-namespace
  allow_failure: true