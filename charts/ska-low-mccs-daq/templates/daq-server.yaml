{{- /*
Deploy the DAQ receivers. For example:

receivers:
  psi-low-bandpass:
    grpc_port: 50051
    receiver_nad: psi-low-sps@sdn1
    receiver_interface: sdn1
    receiver_port: 4660
    nvidia_gpu: true
    storage: daq-data-sync
    expose_data_service: true # optional: defaults to false
    node_selector:
      kubernetes.io/hostname: psi-node3

*/}}
{{- $image := .Values.image}}
{{- range $name, $spec := .Values.receivers}}
{{- $slug := (printf "daqrx-%s" $name)}}
---
apiVersion: v1
kind: Service
metadata:
  name: {{$slug}}
  labels:
    component: {{$slug}}
spec:
  ports:
  - name: {{$slug}}-grpc-port
    port: {{$spec.grpc_port}}
    protocol: TCP
  selector:
    component: {{$slug}}-server
---
apiVersion: v1
kind: Service
metadata:
  name: {{$slug}}-data
  labels:
    component: {{$slug}}
{{- if $spec.expose_data_service}}
{{- with $spec.address_pool }}
  annotations:
    metallb.universe.tf/address-pool: {{.}}
{{- end}}
{{- end}}
spec:
{{- if $spec.expose_data_service}}
  type: LoadBalancer
{{- end}}
  ports:
  - name: {{$slug}}-data-port
    port: {{$spec.receiver_port}}
    protocol: UDP
  selector:
    component: {{$slug}}-server
---
{{- if $spec.expose_data_service}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{$slug}}-serviceaccount
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{$slug}}-service-reader
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["services"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{$slug}}-binding
subjects:
  - kind: ServiceAccount
    name: {{$slug}}-serviceaccount
roleRef:
  kind: Role
  name: {{$slug}}-service-reader
  apiGroup: rbac.authorization.k8s.io
---
{{- end}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{$slug}}-server
  labels:
    component: {{$slug}}-server
spec:
  selector:
    matchLabels:
      component: {{$slug}}-server
  serviceName: {{$slug}}
  replicas: 1
  template:
    metadata:
{{- with $spec.receiver_nad }}
      annotations:
        k8s.v1.cni.cncf.io/networks: {{.}}
{{- end }}
      labels:
        component: {{$slug}}-server
    spec:
{{- if $spec.nvidia_gpu}}
      runtimeClassName: nvidia
{{- end }}
{{- if $spec.expose_data_service}}
      serviceAccountName: {{$slug}}-serviceaccount
      initContainers:
      - name: get-load-balancer-ip
        image: artefact.skao.int/ska-ser-utils:0.1.0
        volumeMounts:
          - name: lb-ip-volume
            mountPath: /tmp
        command:
          - sh
          - -c
          - |
            for i in $(seq 1 30); do
              IP="$(kubectl get svc {{$slug}}-data -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
              if [ -n "$IP" ]; then
                echo "Found LB IP: $IP"
                echo -n "$IP" > /tmp/external-ip
                exit 0
              fi

              echo "No LB IP yet (attempt $i). Sleeping 1s..."
              sleep 1
            done

            echo "ERROR: Timed out waiting for LB IP." >&2
            exit 0
{{- end }}
      containers:
      - command:
        - sh
        - -c
        - |
{{- if $spec.expose_data_service}}
          export EXTERNAL_IP=$(cat /tmp/external-ip)
{{- end }}
          exec MccsDaqServer
        name: {{$slug}}-server
{{- with $image}}
        image: {{.registry}}/{{.name}}:{{.tag | default $.Chart.AppVersion}}
{{- end }}
        imagePullPolicy: IfNotPresent
        env:
          - name: DAQ_GRPC_PORT
            value: {{$spec.grpc_port | quote}}
          - name: DAQ_RECEIVER_INTERFACE
            value: {{$spec.receiver_interface | quote}}
          - name: DAQ_RECEIVER_IP
            value: {{get $spec "receiver_ip" | default "" | quote}}
          - name: DAQ_RECEIVER_PORTS
            value: {{$spec.receiver_port | quote}}
        ports:
          - containerPort: {{$spec.grpc_port}}
            protocol: TCP
        resources:
          {{- $default_resources := dict "limits" (dict "nvidia.com/gpu" ($spec.nvidia_gpu | default false | ternary "1" "0")) }}
          {{- $default_resources | merge ($spec.resources | default dict) | toYaml | nindent 10 }}
        securityContext:
          capabilities:
            add:
            - NET_RAW
            - IPC_LOCK
            - SYS_NICE
            - SYS_ADMIN
            - KILL
            - SYS_TIME
        volumeMounts:
        - name: daq-mount
          mountPath: /product # ADR-55 requires this name
{{- if $spec.expose_data_service}}
        - name: lb-ip-volume
          mountPath: /tmp
{{- end }}
      volumes:
      - name: daq-mount
{{- if hasKey $spec "storage"}}
        persistentVolumeClaim:
          claimName: {{$spec.storage}}
{{- else}}
        emptyDir:
          medium: Memory
{{- end }}
{{ if $spec.expose_data_service }}
      - name: lb-ip-volume
        emptyDir:
          medium: Memory
{{- end }}
      securityContext:
        fsGroup: 1000
{{- with $spec.node_selector}}
      nodeSelector:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $spec.affinity}}
      affinity:
{{ toYaml . | indent 8 }}
{{- end }}
{{- with $spec.tolerations}}
      tolerations:
{{ toYaml . | indent 8 }}
{{- end }}
{{- end }}
